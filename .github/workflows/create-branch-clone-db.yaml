on:
  push:
    branches:
      - 'feature/test-github-action-1'

jobs:
  clone-db:
    environment: webhook-secret
    runs-on: ubuntu-latest
    name: List the display name and shape of the instances in my compartment
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{secrets.OCI_CLI_FINGERPRINT}}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}

    steps:
      - uses: actions/checkout@v2 # Make sure to include this step  
        with:
          token: ${{ secrets.PAT }}


      - name: Set up environment variables
        env :
          a : ${{ secrets.OCI_CLI_USER }}
        run : |
          echo "OCI_CLI_USER: '${{ secrets.OCI_CLI_USER }}'"
          echo "OCI_CLI_FINGERPRINT: '${{ secrets.OCI_CLI_FINGERPRINT }}'" | sed 's/./& /g'
          echo "OCI_CLI_REGION: '${{ secrets.OCI_CLI_REGION }}'" | sed 's/./& /g'
          echo "OCI_CLI_TENANCY: '${{ secrets.OCI_CLI_TENANCY }}'" | sed 's/./& /g'
          echo $a | sed 's/./& /g'


    
      - name: Retrieve the OCID of a named compartment in tenancy
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        id: find-compartment-id
        with:
          command: 'iam compartment list --compartment-id-in-subtree=true --query "data[?name==`labexer`].id"'

      - name: Retrieve the display name and shape of the instances in my compartment
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        id: find-instances
        with:
          command: 'compute instance list --compartment-id ${{ steps.find-compartment-id.outputs.raw_output }}'
          query: 'data[*].{name: \"display-name\", shape: shape}'

      - name: List the display name and shape of the instances in my compartment
        run: |
          echo ${{ steps.find-instances.outputs.output }} | jq .  

      - name: Configure Kubectl
        uses: oracle-actions/configure-kubectl-oke@v1.3.2
        id: test-configure-kubectl-oke-action
        with:
          cluster: ${{ secrets.OKE_CLUSTER_OCID }}

      - name: Run Kubectl
        run: kubectl get nodes -A

      - name: Install Oracle Database Cert Manager
        run: |
          kubectl apply -f cert-manager.yaml

      - name: Install Oracle Database Operator
        run: |
          kubectl apply -f oracle-database-operator.yaml

      - name: Create file
        run: echo "${{ github.ref }}" > branch_info.txt

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update branch_info.txt"
          commit_user_name: "GitHub Actions"
          commit_user_email: "actions@github.com"
          
          
      # - name: Create Autonomous Database from Clone and Upload OCID
      #   run: |
      #     # Configuration Variables for creating the clone
      #     SOURCE_DB_OCID="ocid1.autonomousdatabase.oc1.ap-mumbai-1.anrg6ljrobogfhqajjp7nk74dr3bputn3aa646uistr5xiyxwu5tkh3octuq"
      #     CLONE_TYPE="FULL"
      #     CLONE_DB_DISPLAY_NAME="Test Clone CICD QA"
      #     CLONE_DB_NAME="TestCloneAutomateCICDQA"
      #     COMPARTMENT_OCID="ocid1.compartment.oc1..aaaaaaaavkerdgzd55avjsnomocb2ttxb4j4j7gecxwdfwtstwb2iyowtfba"
      #     ADMIN_PASSWORD="Igdefault@123"
      #     COMPUTE_MODEL="ECPU"
      #     COMPUTE_COUNT=2
      #     DB_WORKLOAD="OLTP"

      #     # Create Autonomous Database from Clone
      #     echo "Creating Autonomous Database from Clone..."
      #     CREATE_RESPONSE=$(oci db autonomous-database create-from-clone \
      #                         --clone-type "$CLONE_TYPE" \
      #                         --compartment-id "$COMPARTMENT_OCID" \
      #                         --source-id "$SOURCE_DB_OCID" \
      #                         --display-name "$CLONE_DB_DISPLAY_NAME" \
      #                         --db-name "$CLONE_DB_NAME" \
      #                         --wait-for-state AVAILABLE \
      #                         --admin-password "$ADMIN_PASSWORD" \
      #                         --data-storage-size-in-tbs 1 \
      #                         --compute-model "$COMPUTE_MODEL" \
      #                         --compute-count "$COMPUTE_COUNT" \
      #                         --db-workload "$DB_WORKLOAD")

      #     if [ -z "$CREATE_RESPONSE" ]; then
      #         echo "Failed to create the Autonomous Database from Clone."
      #         exit 1
      #     else
      #         CLONED_DB_OCID=$(echo "$CREATE_RESPONSE" | jq -r '.data.id')
      #         echo "Successfully created the Autonomous Database from Clone. OCID: $CLONED_DB_OCID"
              
              # Uploading the CLONED_DB_OCID to OCI Object Storage
              echo "Uploading CLONED_DB_OCID to OCI Object Storage..."
              echo "$CLONED_DB_OCID" | \
              oci os object put \
                --bucket-name expense-tracker \
                --name "${{ github.ref }}/cloned-adb-oci-id.txt" \
                --file - \
                --force
              echo "Upload successful."
          fi # This closes the if statement

      - name: Update YAML file
        run: |
          CLONED_DB_OCID=ocid1.autonomousdatabase.oc1.ap-mumbai-1.anrg6ljrobogfhqawq6nbd3k52n5x7sa4zw322y2qrs5j2q4io3d22ekuazq
          sed -i "s|<existing_ADB_OCID>|$CLONED_DB_OCID|g" integrate-operator-with-db.yaml
          sed -i "s|<base64_encoded_password_here>|Igdefault@123|g" integrate-operator-with-db.yaml
          sed -i "s|<base64_encoded_private_key_here>|$OCI_CLI_KEY_CONTENT|g" integrate-operator-with-db.yaml

      - name: Display updated YAML file
        run: cat your_yaml_file.yaml
